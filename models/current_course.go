// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CurrentCourse current course
// swagger:model currentCourse
type CurrentCourse struct {

	// crowns
	Crowns int64 `json:"crowns,omitempty"`

	// from language
	FromLanguage string `json:"fromLanguage,omitempty"`

	// health enabled
	HealthEnabled bool `json:"healthEnabled,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// learning language
	LearningLanguage string `json:"learningLanguage,omitempty"`

	// progress quiz history
	ProgressQuizHistory []*ProgressQuizItem `json:"progressQuizHistory"`

	// sections
	Sections []*CourseSection `json:"sections"`

	// smart tips
	SmartTips []*SmartTip `json:"smartTips"`

	// status
	Status string `json:"status,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// tracking properties
	TrackingProperties *TrackingProperties `json:"trackingProperties,omitempty"`

	// words learned
	WordsLearned int64 `json:"wordsLearned,omitempty"`

	// xp
	Xp int64 `json:"xp,omitempty"`
}

// Validate validates this current course
func (m *CurrentCourse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProgressQuizHistory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmartTips(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrackingProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CurrentCourse) validateProgressQuizHistory(formats strfmt.Registry) error {

	if swag.IsZero(m.ProgressQuizHistory) { // not required
		return nil
	}

	for i := 0; i < len(m.ProgressQuizHistory); i++ {
		if swag.IsZero(m.ProgressQuizHistory[i]) { // not required
			continue
		}

		if m.ProgressQuizHistory[i] != nil {
			if err := m.ProgressQuizHistory[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("progressQuizHistory" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CurrentCourse) validateSections(formats strfmt.Registry) error {

	if swag.IsZero(m.Sections) { // not required
		return nil
	}

	for i := 0; i < len(m.Sections); i++ {
		if swag.IsZero(m.Sections[i]) { // not required
			continue
		}

		if m.Sections[i] != nil {
			if err := m.Sections[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CurrentCourse) validateSmartTips(formats strfmt.Registry) error {

	if swag.IsZero(m.SmartTips) { // not required
		return nil
	}

	for i := 0; i < len(m.SmartTips); i++ {
		if swag.IsZero(m.SmartTips[i]) { // not required
			continue
		}

		if m.SmartTips[i] != nil {
			if err := m.SmartTips[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("smartTips" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CurrentCourse) validateTrackingProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.TrackingProperties) { // not required
		return nil
	}

	if m.TrackingProperties != nil {
		if err := m.TrackingProperties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trackingProperties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CurrentCourse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CurrentCourse) UnmarshalBinary(b []byte) error {
	var res CurrentCourse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
