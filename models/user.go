// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// User user
// swagger:model user
type User struct {

	// achievements
	Achievements []*UserAchievementsItems0 `json:"_achievements"`

	// ads enabled
	AdsEnabled bool `json:"adsEnabled,omitempty"`

	// auto update preloaded courses
	AutoUpdatePreloadedCourses bool `json:"autoUpdatePreloadedCourses,omitempty"`

	// bio
	Bio string `json:"bio,omitempty"`

	// can create pearson classroom
	CanCreatePearsonClassroom bool `json:"canCreatePearsonClassroom,omitempty"`

	// can use moderation tools
	CanUseModerationTools bool `json:"canUseModerationTools,omitempty"`

	// coach outfit
	CoachOutfit string `json:"coachOutfit,omitempty"`

	// country code
	CountryCode string `json:"countryCode,omitempty"`

	// courses
	Courses []*Course `json:"courses"`

	// creation date
	CreationDate int64 `json:"creationDate,omitempty"`

	// currency reward bundles
	CurrencyRewardBundles []*CurrencyRewardBundle `json:"currencyRewardBundles"`

	// current course
	CurrentCourse *CurrentCourse `json:"currentCourse,omitempty"`

	// current course Id
	CurrentCourseID string `json:"currentCourseId,omitempty"`

	// deactivated
	Deactivated bool `json:"deactivated,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// email announcement
	EmailAnnouncement bool `json:"emailAnnouncement,omitempty"`

	// email assignment
	EmailAssignment bool `json:"emailAssignment,omitempty"`

	// email assignment complete
	EmailAssignmentComplete bool `json:"emailAssignmentComplete,omitempty"`

	// email classroom join
	EmailClassroomJoin bool `json:"emailClassroomJoin,omitempty"`

	// email clubs
	EmailClubs bool `json:"emailClubs,omitempty"`

	// email edit suggested
	EmailEditSuggested bool `json:"emailEditSuggested,omitempty"`

	// email schools announcement
	EmailSchoolsAnnouncement bool `json:"emailSchoolsAnnouncement,omitempty"`

	// email streak freeze used
	EmailStreakFreezeUsed bool `json:"emailStreakFreezeUsed,omitempty"`

	// email streak saver
	EmailStreakSaver bool `json:"emailStreakSaver,omitempty"`

	// email verified
	EmailVerified bool `json:"emailVerified,omitempty"`

	// email weekly progress report
	EmailWeeklyProgressReport bool `json:"emailWeeklyProgressReport,omitempty"`

	// email weekly report
	EmailWeeklyReport bool `json:"emailWeeklyReport,omitempty"`

	// enable microphone
	EnableMicrophone bool `json:"enableMicrophone,omitempty"`

	// enable speaker
	EnableSpeaker bool `json:"enableSpeaker,omitempty"`

	// facebook Id
	FacebookID string `json:"facebookId,omitempty"`

	// from language
	FromLanguage string `json:"fromLanguage,omitempty"`

	// gems
	Gems int64 `json:"gems,omitempty"`

	// gems config
	GemsConfig *GemsConfig `json:"gemsConfig,omitempty"`

	// google Id
	GoogleID string `json:"googleId,omitempty"`

	// has facebook Id
	HasFacebookID bool `json:"hasFacebookId,omitempty"`

	// has google Id
	HasGoogleID bool `json:"hasGoogleId,omitempty"`

	// has phone number
	HasPhoneNumber bool `json:"hasPhoneNumber,omitempty"`

	// has plus
	HasPlus bool `json:"hasPlus,omitempty"`

	// has recent activity15
	HasRecentActivity15 bool `json:"hasRecentActivity15,omitempty"`

	// health
	Health *Health `json:"health,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// insite immersion lingots
	InsiteImmersionLingots bool `json:"insiteImmersionLingots,omitempty"`

	// insite sentence edited
	InsiteSentenceEdited bool `json:"insiteSentenceEdited,omitempty"`

	// invite URL
	InviteURL string `json:"inviteURL,omitempty"`

	// last streak
	LastStreak *LastStreak `json:"lastStreak,omitempty"`

	// learning language
	LearningLanguage string `json:"learningLanguage,omitempty"`

	// lingots
	Lingots int64 `json:"lingots,omitempty"`

	// location
	Location string `json:"location,omitempty"`

	// monthly xp
	MonthlyXp int64 `json:"monthlyXp,omitempty"`

	// motivation
	Motivation string `json:"motivation,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// optional features
	OptionalFeatures []*OptionalFeature `json:"optionalFeatures"`

	// picture
	Picture string `json:"picture,omitempty"`

	// push announcement
	PushAnnouncement bool `json:"pushAnnouncement,omitempty"`

	// push clubs
	PushClubs bool `json:"pushClubs,omitempty"`

	// push comment
	PushComment bool `json:"pushComment,omitempty"`

	// push edit suggested
	PushEditSuggested bool `json:"pushEditSuggested,omitempty"`

	// push follow
	PushFollow bool `json:"pushFollow,omitempty"`

	// push leaderboards
	PushLeaderboards bool `json:"pushLeaderboards,omitempty"`

	// push promotion
	PushPromotion bool `json:"pushPromotion,omitempty"`

	// push streak saver
	PushStreakSaver bool `json:"pushStreakSaver,omitempty"`

	// push stream post
	PushStreamPost bool `json:"pushStreamPost,omitempty"`

	// referral info
	ReferralInfo *ReferralInfo `json:"referralInfo,omitempty"`

	// roles
	Roles []string `json:"roles"`

	// shop items
	ShopItems []*ShopItemPurchasedList `json:"shopItems"`

	// streak
	Streak int64 `json:"streak,omitempty"`

	// streak data
	StreakData *StreakData `json:"streakData,omitempty"`

	// timer boost config
	TimerBoostConfig *TimerBoostConfig `json:"timerBoostConfig,omitempty"`

	// timezone
	Timezone string `json:"timezone,omitempty"`

	// timezone offset
	TimezoneOffset string `json:"timezoneOffset,omitempty"`

	// total xp
	TotalXp int64 `json:"totalXp,omitempty"`

	// username
	Username string `json:"username,omitempty"`

	// weekly xp
	WeeklyXp int64 `json:"weeklyXp,omitempty"`

	// xp gains
	XpGains []*XpGain `json:"xpGains"`

	// xp goal
	XpGoal int64 `json:"xpGoal,omitempty"`

	// xp goal met today
	XpGoalMetToday bool `json:"xpGoalMetToday,omitempty"`

	// zaps remaining
	ZapsRemaining int64 `json:"zapsRemaining,omitempty"`
}

// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAchievements(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCourses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrencyRewardBundles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentCourse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGemsConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastStreak(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptionalFeatures(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReferralInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShopItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreakData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimerBoostConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateXpGains(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) validateAchievements(formats strfmt.Registry) error {

	if swag.IsZero(m.Achievements) { // not required
		return nil
	}

	for i := 0; i < len(m.Achievements); i++ {
		if swag.IsZero(m.Achievements[i]) { // not required
			continue
		}

		if m.Achievements[i] != nil {
			if err := m.Achievements[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("_achievements" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *User) validateCourses(formats strfmt.Registry) error {

	if swag.IsZero(m.Courses) { // not required
		return nil
	}

	for i := 0; i < len(m.Courses); i++ {
		if swag.IsZero(m.Courses[i]) { // not required
			continue
		}

		if m.Courses[i] != nil {
			if err := m.Courses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("courses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *User) validateCurrencyRewardBundles(formats strfmt.Registry) error {

	if swag.IsZero(m.CurrencyRewardBundles) { // not required
		return nil
	}

	for i := 0; i < len(m.CurrencyRewardBundles); i++ {
		if swag.IsZero(m.CurrencyRewardBundles[i]) { // not required
			continue
		}

		if m.CurrencyRewardBundles[i] != nil {
			if err := m.CurrencyRewardBundles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("currencyRewardBundles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *User) validateCurrentCourse(formats strfmt.Registry) error {

	if swag.IsZero(m.CurrentCourse) { // not required
		return nil
	}

	if m.CurrentCourse != nil {
		if err := m.CurrentCourse.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currentCourse")
			}
			return err
		}
	}

	return nil
}

func (m *User) validateGemsConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.GemsConfig) { // not required
		return nil
	}

	if m.GemsConfig != nil {
		if err := m.GemsConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gemsConfig")
			}
			return err
		}
	}

	return nil
}

func (m *User) validateHealth(formats strfmt.Registry) error {

	if swag.IsZero(m.Health) { // not required
		return nil
	}

	if m.Health != nil {
		if err := m.Health.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health")
			}
			return err
		}
	}

	return nil
}

func (m *User) validateLastStreak(formats strfmt.Registry) error {

	if swag.IsZero(m.LastStreak) { // not required
		return nil
	}

	if m.LastStreak != nil {
		if err := m.LastStreak.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastStreak")
			}
			return err
		}
	}

	return nil
}

func (m *User) validateOptionalFeatures(formats strfmt.Registry) error {

	if swag.IsZero(m.OptionalFeatures) { // not required
		return nil
	}

	for i := 0; i < len(m.OptionalFeatures); i++ {
		if swag.IsZero(m.OptionalFeatures[i]) { // not required
			continue
		}

		if m.OptionalFeatures[i] != nil {
			if err := m.OptionalFeatures[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("optionalFeatures" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *User) validateReferralInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.ReferralInfo) { // not required
		return nil
	}

	if m.ReferralInfo != nil {
		if err := m.ReferralInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("referralInfo")
			}
			return err
		}
	}

	return nil
}

func (m *User) validateShopItems(formats strfmt.Registry) error {

	if swag.IsZero(m.ShopItems) { // not required
		return nil
	}

	for i := 0; i < len(m.ShopItems); i++ {
		if swag.IsZero(m.ShopItems[i]) { // not required
			continue
		}

		if m.ShopItems[i] != nil {
			if err := m.ShopItems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("shopItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *User) validateStreakData(formats strfmt.Registry) error {

	if swag.IsZero(m.StreakData) { // not required
		return nil
	}

	if m.StreakData != nil {
		if err := m.StreakData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("streakData")
			}
			return err
		}
	}

	return nil
}

func (m *User) validateTimerBoostConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.TimerBoostConfig) { // not required
		return nil
	}

	if m.TimerBoostConfig != nil {
		if err := m.TimerBoostConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timerBoostConfig")
			}
			return err
		}
	}

	return nil
}

func (m *User) validateXpGains(formats strfmt.Registry) error {

	if swag.IsZero(m.XpGains) { // not required
		return nil
	}

	for i := 0; i < len(m.XpGains); i++ {
		if swag.IsZero(m.XpGains[i]) { // not required
			continue
		}

		if m.XpGains[i] != nil {
			if err := m.XpGains[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("xpGains" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *User) UnmarshalBinary(b []byte) error {
	var res User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UserAchievementsItems0 user achievements items0
// swagger:model UserAchievementsItems0
type UserAchievementsItems0 struct {

	// count
	Count int64 `json:"count,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// should show unlock
	ShouldShowUnlock bool `json:"shouldShowUnlock,omitempty"`

	// tier
	Tier int64 `json:"tier,omitempty"`

	// tier counts
	TierCounts []int64 `json:"tierCounts"`
}

// Validate validates this user achievements items0
func (m *UserAchievementsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UserAchievementsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserAchievementsItems0) UnmarshalBinary(b []byte) error {
	var res UserAchievementsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
