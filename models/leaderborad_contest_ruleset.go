// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LeaderboradContestRuleset leaderborad contest ruleset
// swagger:model leaderboradContestRuleset
type LeaderboradContestRuleset struct {

	// cohort size
	CohortSize int64 `json:"cohort_size,omitempty"`

	// cohort type
	CohortType string `json:"cohort_type,omitempty"`

	// num demoted
	NumDemoted []int64 `json:"num_demoted"`

	// num losers
	NumLosers int64 `json:"num_losers,omitempty"`

	// num promoted
	NumPromoted []int64 `json:"num_promoted"`

	// num winners
	NumWinners int64 `json:"num_winners,omitempty"`

	// rewards
	Rewards []*LeaderboradContestReward `json:"rewards"`

	// score type
	ScoreType string `json:"score_type,omitempty"`

	// tiered
	Tiered bool `json:"tiered,omitempty"`
}

// Validate validates this leaderborad contest ruleset
func (m *LeaderboradContestRuleset) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRewards(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LeaderboradContestRuleset) validateRewards(formats strfmt.Registry) error {

	if swag.IsZero(m.Rewards) { // not required
		return nil
	}

	for i := 0; i < len(m.Rewards); i++ {
		if swag.IsZero(m.Rewards[i]) { // not required
			continue
		}

		if m.Rewards[i] != nil {
			if err := m.Rewards[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rewards" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *LeaderboradContestRuleset) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LeaderboradContestRuleset) UnmarshalBinary(b []byte) error {
	var res LeaderboradContestRuleset
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
