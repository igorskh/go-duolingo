// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LeaderdoardActive leaderdoard active
// swagger:model LeaderdoardActive
type LeaderdoardActive struct {

	// cohort
	Cohort *LeaderdoardActiveCohort `json:"cohort,omitempty"`

	// complete
	Complete bool `json:"complete,omitempty"`

	// score
	Score float64 `json:"score,omitempty"`

	// user id
	UserID int64 `json:"user_id,omitempty"`
}

// Validate validates this leaderdoard active
func (m *LeaderdoardActive) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCohort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LeaderdoardActive) validateCohort(formats strfmt.Registry) error {

	if swag.IsZero(m.Cohort) { // not required
		return nil
	}

	if m.Cohort != nil {
		if err := m.Cohort.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cohort")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LeaderdoardActive) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LeaderdoardActive) UnmarshalBinary(b []byte) error {
	var res LeaderdoardActive
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LeaderdoardActiveCohort leaderdoard active cohort
// swagger:model LeaderdoardActiveCohort
type LeaderdoardActiveCohort struct {

	// rankings
	Rankings []*LeaderdoardRanking `json:"rankings"`

	// tier
	Tier int64 `json:"tier,omitempty"`
}

// Validate validates this leaderdoard active cohort
func (m *LeaderdoardActiveCohort) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRankings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LeaderdoardActiveCohort) validateRankings(formats strfmt.Registry) error {

	if swag.IsZero(m.Rankings) { // not required
		return nil
	}

	for i := 0; i < len(m.Rankings); i++ {
		if swag.IsZero(m.Rankings[i]) { // not required
			continue
		}

		if m.Rankings[i] != nil {
			if err := m.Rankings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cohort" + "." + "rankings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *LeaderdoardActiveCohort) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LeaderdoardActiveCohort) UnmarshalBinary(b []byte) error {
	var res LeaderdoardActiveCohort
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
