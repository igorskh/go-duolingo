// Code generated by go-swagger; DO NOT EDIT.

package achievements

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAchievementsParams creates a new GetAchievementsParams object
// with the default values initialized.
func NewGetAchievementsParams() *GetAchievementsParams {
	var ()
	return &GetAchievementsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAchievementsParamsWithTimeout creates a new GetAchievementsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAchievementsParamsWithTimeout(timeout time.Duration) *GetAchievementsParams {
	var ()
	return &GetAchievementsParams{

		timeout: timeout,
	}
}

// NewGetAchievementsParamsWithContext creates a new GetAchievementsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAchievementsParamsWithContext(ctx context.Context) *GetAchievementsParams {
	var ()
	return &GetAchievementsParams{

		Context: ctx,
	}
}

// NewGetAchievementsParamsWithHTTPClient creates a new GetAchievementsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAchievementsParamsWithHTTPClient(client *http.Client) *GetAchievementsParams {
	var ()
	return &GetAchievementsParams{
		HTTPClient: client,
	}
}

/*GetAchievementsParams contains all the parameters to send to the API endpoint
for the get achievements operation typically these are written to a http.Request
*/
type GetAchievementsParams struct {

	/*FromLanguage
	  Language from

	*/
	FromLanguage string
	/*HasPlus
	  Has plus subscription

	*/
	HasPlus *int64
	/*IsAgeRestricted
	  Is age restricted

	*/
	IsAgeRestricted *int64
	/*IsProfilePublic
	  Is profile public

	*/
	IsProfilePublic *int64
	/*IsSchools
	  Is schools

	*/
	IsSchools *int64
	/*LearningLanguage
	  Learning language

	*/
	LearningLanguage string
	/*UserID
	  UserID

	*/
	UserID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get achievements params
func (o *GetAchievementsParams) WithTimeout(timeout time.Duration) *GetAchievementsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get achievements params
func (o *GetAchievementsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get achievements params
func (o *GetAchievementsParams) WithContext(ctx context.Context) *GetAchievementsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get achievements params
func (o *GetAchievementsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get achievements params
func (o *GetAchievementsParams) WithHTTPClient(client *http.Client) *GetAchievementsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get achievements params
func (o *GetAchievementsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFromLanguage adds the fromLanguage to the get achievements params
func (o *GetAchievementsParams) WithFromLanguage(fromLanguage string) *GetAchievementsParams {
	o.SetFromLanguage(fromLanguage)
	return o
}

// SetFromLanguage adds the fromLanguage to the get achievements params
func (o *GetAchievementsParams) SetFromLanguage(fromLanguage string) {
	o.FromLanguage = fromLanguage
}

// WithHasPlus adds the hasPlus to the get achievements params
func (o *GetAchievementsParams) WithHasPlus(hasPlus *int64) *GetAchievementsParams {
	o.SetHasPlus(hasPlus)
	return o
}

// SetHasPlus adds the hasPlus to the get achievements params
func (o *GetAchievementsParams) SetHasPlus(hasPlus *int64) {
	o.HasPlus = hasPlus
}

// WithIsAgeRestricted adds the isAgeRestricted to the get achievements params
func (o *GetAchievementsParams) WithIsAgeRestricted(isAgeRestricted *int64) *GetAchievementsParams {
	o.SetIsAgeRestricted(isAgeRestricted)
	return o
}

// SetIsAgeRestricted adds the isAgeRestricted to the get achievements params
func (o *GetAchievementsParams) SetIsAgeRestricted(isAgeRestricted *int64) {
	o.IsAgeRestricted = isAgeRestricted
}

// WithIsProfilePublic adds the isProfilePublic to the get achievements params
func (o *GetAchievementsParams) WithIsProfilePublic(isProfilePublic *int64) *GetAchievementsParams {
	o.SetIsProfilePublic(isProfilePublic)
	return o
}

// SetIsProfilePublic adds the isProfilePublic to the get achievements params
func (o *GetAchievementsParams) SetIsProfilePublic(isProfilePublic *int64) {
	o.IsProfilePublic = isProfilePublic
}

// WithIsSchools adds the isSchools to the get achievements params
func (o *GetAchievementsParams) WithIsSchools(isSchools *int64) *GetAchievementsParams {
	o.SetIsSchools(isSchools)
	return o
}

// SetIsSchools adds the isSchools to the get achievements params
func (o *GetAchievementsParams) SetIsSchools(isSchools *int64) {
	o.IsSchools = isSchools
}

// WithLearningLanguage adds the learningLanguage to the get achievements params
func (o *GetAchievementsParams) WithLearningLanguage(learningLanguage string) *GetAchievementsParams {
	o.SetLearningLanguage(learningLanguage)
	return o
}

// SetLearningLanguage adds the learningLanguage to the get achievements params
func (o *GetAchievementsParams) SetLearningLanguage(learningLanguage string) {
	o.LearningLanguage = learningLanguage
}

// WithUserID adds the userID to the get achievements params
func (o *GetAchievementsParams) WithUserID(userID int64) *GetAchievementsParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the get achievements params
func (o *GetAchievementsParams) SetUserID(userID int64) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *GetAchievementsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param fromLanguage
	qrFromLanguage := o.FromLanguage
	qFromLanguage := qrFromLanguage
	if qFromLanguage != "" {
		if err := r.SetQueryParam("fromLanguage", qFromLanguage); err != nil {
			return err
		}
	}

	if o.HasPlus != nil {

		// query param hasPlus
		var qrHasPlus int64
		if o.HasPlus != nil {
			qrHasPlus = *o.HasPlus
		}
		qHasPlus := swag.FormatInt64(qrHasPlus)
		if qHasPlus != "" {
			if err := r.SetQueryParam("hasPlus", qHasPlus); err != nil {
				return err
			}
		}

	}

	if o.IsAgeRestricted != nil {

		// query param isAgeRestricted
		var qrIsAgeRestricted int64
		if o.IsAgeRestricted != nil {
			qrIsAgeRestricted = *o.IsAgeRestricted
		}
		qIsAgeRestricted := swag.FormatInt64(qrIsAgeRestricted)
		if qIsAgeRestricted != "" {
			if err := r.SetQueryParam("isAgeRestricted", qIsAgeRestricted); err != nil {
				return err
			}
		}

	}

	if o.IsProfilePublic != nil {

		// query param isProfilePublic
		var qrIsProfilePublic int64
		if o.IsProfilePublic != nil {
			qrIsProfilePublic = *o.IsProfilePublic
		}
		qIsProfilePublic := swag.FormatInt64(qrIsProfilePublic)
		if qIsProfilePublic != "" {
			if err := r.SetQueryParam("isProfilePublic", qIsProfilePublic); err != nil {
				return err
			}
		}

	}

	if o.IsSchools != nil {

		// query param isSchools
		var qrIsSchools int64
		if o.IsSchools != nil {
			qrIsSchools = *o.IsSchools
		}
		qIsSchools := swag.FormatInt64(qrIsSchools)
		if qIsSchools != "" {
			if err := r.SetQueryParam("isSchools", qIsSchools); err != nil {
				return err
			}
		}

	}

	// query param learningLanguage
	qrLearningLanguage := o.LearningLanguage
	qLearningLanguage := qrLearningLanguage
	if qLearningLanguage != "" {
		if err := r.SetQueryParam("learningLanguage", qLearningLanguage); err != nil {
			return err
		}
	}

	// path param userID
	if err := r.SetPathParam("userID", swag.FormatInt64(o.UserID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
